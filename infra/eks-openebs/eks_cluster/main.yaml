Description:  A kubernetes cluster (control plane) on EKS with optional Fargate profile

Parameters:
  EnvName:
    Type: String
    Default: "DEVENV"
  FargateEnabled:
    Type: String
    Default: "false"
  FargateNamespace:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "nsfargate"
  EKSVersion:
    Description: Kubernetes version
    Type: String
    Default: '1.19'

Conditions:
  FargateCondition: !Equals
    - !Ref FargateEnabled
    - "true"

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      # Restrict access policies
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/EKSClusterRole'

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name:
        Fn::ImportValue:
          !Sub "BC::${EnvName}::EKSNAME"
      Version: !Ref EKSVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "BC::${EnvName}::EKSSGID"
        SubnetIds:
          - Fn::ImportValue:
              !Sub "BC::${EnvName}::PUBNET1"
          - Fn::ImportValue:
              !Sub "BC::${EnvName}::PUBNET2"
  #          - Fn::ImportValue:
  #              !Sub "BC::${EnvName}::PVTNET1"
  #          - Fn::ImportValue:
  #              !Sub "BC::${EnvName}::PVTNET2"

  EKSFargatePodExecutionRole:
    Type: AWS::IAM::Role
    Condition: "FargateCondition"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks-fargate-pods.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy

  EKSFargateProfile:
    Type: AWS::EKS::FargateProfile
    Condition: "FargateCondition"
    Properties:
      ClusterName: !Ref EKSCluster
      PodExecutionRoleArn: !GetAtt EKSFargatePodExecutionRole.Arn
      Selectors:
        - Namespace: !Ref FargateNamespace
      Subnets:
        - Fn::ImportValue:
            !Sub "BC::${EnvName}::PUBNET1"
        - Fn::ImportValue:
            !Sub "BC::${EnvName}::PUBNET2"
        - Fn::ImportValue:
            !Sub "BC::${EnvName}::PVTNET1"
        - Fn::ImportValue:
            !Sub "BC::${EnvName}::PVTNET2"

Outputs:
  EKSClusterRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: !Sub "BC::${EnvName}::EKSROLEARN"

  EKSClusterName:
    Description: The EKS Cluster Name
    Value: !Ref EKSCluster
    Export:
      Name: !Sub "BC::${EnvName}::EKS"

  EKSClusterArn:
    Description: The EKS Cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub "BC::${EnvName}::EKSARN"

  EKSClusterCAData:
    Description: The EKS Cluster CA Data
    Value: !GetAtt EKSCluster.CertificateAuthorityData

  EKSClusterEndpoint:
    Description: The EKS Cluster Endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub "BC::${EnvName}::EKSEPT"

  EKSStackName:
    Value: !Ref 'AWS::StackName'

# cheat sheet

# aws cloudformation deploy --template-file k8s.yaml --capabilities CAPABILITY_NAMED_IAM --stack-name "${TF_VAR_env_name}-EKS" --parameter-overrides EnvName=${TF_VAR_env_name}
# aws eks update-kubeconfig --name "${TF_VAR_env_name}EKS"
# aws cloudformation delete-stack --stack-name "${TF_VAR_env_name}-EKS"
